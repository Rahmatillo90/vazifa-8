generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//// üë§ Foydalanuvchilar jadvali
model User {
  id        String   @id @default(uuid())
  username  String   @unique
  email     String   @unique
  password  String
  role      Role     @default(USER)
  avatarUrl String?
  fullName  String?
  phone     String?
  country   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subscriptions UserSubscription[]
  favorites     Favorite[]
  reviews       Review[]
  watchHistory  WatchHistory[]
  createdMovies Movie[]            @relation("CreatedMovies")

  @@map("users")
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

//// üí≥ Obuna rejalari
model SubscriptionPlan {
  id        String    @id @default(uuid())
  name      String    @unique
  price     Float
  duration  Int
  unit      SPlanUnit @default(DAY)
  features  Json?
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  userSubscriptions UserSubscription[]

  @@map("subscription_plans")
}

enum SPlanUnit {
  DAY
  WEEK
  MONTH
  YEAR
}

model UserSubscription {
  id        String             @id @default(uuid())
  userId    String
  planId    String
  startDate DateTime           @default(now())
  endDate   DateTime?
  status    SubscriptionStatus @default(PENDING_PAYMENT)
  autoRenew Boolean            @default(false)
  createdAt DateTime           @default(now())

  user     User             @relation(fields: [userId], references: [id])
  plan     SubscriptionPlan @relation(fields: [planId], references: [id])
  payments Payment[]

  @@map("user_subscriptions")
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  CANCELED
  PENDING_PAYMENT
}

model Payment {
  id                    String        @id @default(uuid())
  userSubscriptionId    String
  amount                Float
  paymentMethod         PaymentMethod
  paymentDetails        Json?
  status                PaymentStatus @default(PENDING)
  externalTransactionId String?
  createdAt             DateTime      @default(now())

  userSubscription UserSubscription @relation(fields: [userSubscriptionId], references: [id])

  @@map("payments")
}

enum PaymentMethod {
  CARD
  CLICK
  PAYME
  OTHER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

//// üé¨ Filmlar
model Movie {
  id               String           @id @default(uuid())
  title            String
  slug             String           @unique
  description      String?
  releaseYear      Int
  durationSecond   Int              @map("duration_ms")
  posterUrl        String
  rating           Float?           @default(0)
  subscriptionType SubscriptionType @default(FREE)
  viewCount        Int              @default(0)
  createdById      String
  createdAt        DateTime         @default(now())

  createdBy    User            @relation("CreatedMovies", fields: [createdById], references: [id])
  categories   MovieCategory[]
  files        MovieFile[]
  favorites    Favorite[]
  reviews      Review[]
  watchHistory WatchHistory[]

  @@map("movies")
}

enum SubscriptionType {
  FREE
  PREMIUM
}

//// üè∑Ô∏è Kategoriyalar
model Category {
  id          String   @id @default(uuid())
  name        String   @unique
  slug        String   @unique
  description String?
  createdAt   DateTime @default(now())

  movieCategories MovieCategory[]

  @@map("categories")
}

//// üé¨ Kino-kategoriya ko‚Äòprik jadvali
model MovieCategory {
  id         String @id @default(uuid())
  movieId    String
  categoryId String

  movie    Movie    @relation(fields: [movieId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])

  @@unique([movieId, categoryId])
  @@map("movie_categories")
}

//// üìÇ Kino fayllari
model MovieFile {
  id        String       @id @default(uuid())
  movieId   String
  fileUrl   String
  quality   VideoQuality
  language  String       @default("uz")
  createdAt DateTime     @default(now())

  movie Movie @relation(fields: [movieId], references: [id])

  @@map("movie_files")
}

enum VideoQuality {
  UHD
  HD
  SD
  FULLHD
  UNKNOWN
}

//// ‚≠ê Sevimlilar
model Favorite {
  id        String   @id @default(uuid())
  userId    String
  movieId   String
  createdAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id])
  movie Movie @relation(fields: [movieId], references: [id])

  @@unique([userId, movieId])
  @@map("favorites")
}

//// üìù Sharhlar
model Review {
  id        String   @id @default(uuid())
  userId    String
  movieId   String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id])
  movie Movie @relation(fields: [movieId], references: [id])

  @@map("reviews")
}

//// üì∫ Tomosha tarixi
model WatchHistory {
  id                String   @id @default(uuid())
  userId            String
  movieId           String
  watchedDuration   Int
  watchedPercentage Float
  lastWatched       DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id])
  movie Movie @relation(fields: [movieId], references: [id])

  @@map("watch_history")
}
